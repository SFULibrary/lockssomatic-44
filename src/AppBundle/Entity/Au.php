<?php

/*
 *  This file is licensed under the MIT License version 3 or
 *  later. See the LICENSE file for details.
 *
 *  Copyright 2018 Michael Joyce <ubermichael@gmail.com>.
 */

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Nines\UtilBundle\Entity\AbstractEntity;

/**
 * LOCKSS Archival Unit.
 *
 * @ORM\Table(name="au")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\AuRepository")
 */
class Au extends AbstractEntity {

    /**
     * True if this AU is managed by LOCKSSOMatic. Defaults to false.
     *
     * @var bool
     * @ORM\Column(name="open", type="boolean", nullable=false)
     */
    private $open;

    /**
     * @ORM\Column(name="auid", type="string", length=512, nullable=false)
     *
     * @var mixed
     */
    private $auid;

    /**
     * LOCKSSOMatic comment for this au. Its specific to LOCKSSOMatic.
     *
     * @var string
     *
     * @ORM\Column(name="comment", type="string", length=512, nullable=true)
     */
    private $comment;

    /**
     * The PLN for this AU.
     *
     * @var Pln
     *
     * @ORM\ManyToOne(targetEntity="Pln", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $pln;

    /**
     * The content provider for this AU.
     *
     * In LOM, all content in an AU must come from the same provider.
     *
     * @var ContentProvider
     *
     * @ORM\ManyToOne(targetEntity="ContentProvider", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $contentProvider;

    /**
     * LOCKSS AUs are generated by LOCKSS plugins.
     *
     * This is the plugin that generated this AU.
     *
     * @var Plugin
     *
     * @ORM\ManyToOne(targetEntity="Plugin", inversedBy="aus")
     * @ORM\JoinColumn(nullable=false)
     */
    private $plugin;

    /**
     * Hierarchial collection of properties for the AU.
     *
     * @var AuProperty[]|Collection
     *
     * @ORM\OneToMany(targetEntity="AuProperty", mappedBy="au")
     */
    private $auProperties;

    /**
     * Timestamped list of AU status records.
     *
     * @var AuStatus[]|Collection
     *
     * @ORM\OneToMany(targetEntity="AuStatus", mappedBy="au")
     */
    private $auStatus;

    /**
     * List of all content deposited to the AU.
     *
     * This is a LOCKSSOMatic-specific field.
     *
     * @var Deposits[]|Collection
     *
     * @ORM\OneToMany(targetEntity="Deposit", mappedBy="au")
     */
    private $deposits;

    /**
     * Build the AU.
     */
    public function __construct() {
        parent::__construct();
        $this->open = true;
        $this->auProperties = new ArrayCollection();
        $this->auStatus = new ArrayCollection();
        $this->deposits = new ArrayCollection();
    }

    /**
     * Build a string representation of the AU.
     *
     * @return string
     */
    public function __toString() {
        if ($this->id) {
            return "AU #" . $this->id;
        } else {
            return "new AU";
        }
    }

    /**
     * Set open.
     *
     * @param bool $open
     *
     * @return Au
     */
    public function setOpen($open) {
        if ($this->open) {
            $this->open = $open;
        }
        return $this;
    }

    /**
     * Get open.
     *
     * @return bool
     */
    public function isOpen() {
        return $this->open;
    }

    /**
     * Set comment.
     *
     * @param string $comment
     *
     * @return Au
     */
    public function setComment($comment) {
        $this->comment = $comment;

        return $this;
    }

    /**
     * Get comment.
     *
     * @return string
     */
    public function getComment() {
        return $this->comment;
    }

    /**
     * Set pln.
     *
     * @param Pln $pln
     *
     * @return Au
     */
    public function setPln(Pln $pln = null) {
        $this->pln = $pln;

        return $this;
    }

    /**
     * Get pln.
     *
     * @return Pln
     */
    public function getPln() {
        return $this->pln;
    }

    /**
     * Set contentProvider.
     *
     * @param ContentProvider $contentProvider
     *
     * @return Au
     */
    public function setContentProvider(ContentProvider $contentProvider = null) {
        $this->contentProvider = $contentProvider;

        return $this;
    }

    /**
     * Get contentProvider.
     *
     * @return ContentProvider
     */
    public function getContentProvider() {
        return $this->contentProvider;
    }

    /**
     * Set plugin.
     *
     * @param Plugin $plugin
     *
     * @return Au
     */
    public function setPlugin(Plugin $plugin = null) {
        $this->plugin = $plugin;

        return $this;
    }

    /**
     * Get plugin.
     *
     * @return Plugin
     */
    public function getPlugin() {
        return $this->plugin;
    }

    /**
     * Add auProperty.
     *
     * @param AuProperty $auProperty
     *
     * @return Au
     */
    public function addAuProperty(AuProperty $auProperty) {
        $this->auProperties[] = $auProperty;

        return $this;
    }

    /**
     * Remove auProperty.
     *
     * @param AuProperty $auProperty
     */
    public function removeAuProperty(AuProperty $auProperty) {
        $this->auProperties->removeElement($auProperty);
    }

    /**
     * Get auProperties.
     *
     * @return Collection
     */
    public function getAuProperties() {
        return $this->auProperties;
    }

    public function hasAuProperties() {
        return !$this->auProperties->isEmpty();
    }

    /**
     * @return Collection|AuProperty[]
     */
    public function getRootAuProperties() {
        return $this->auProperties->filter(function (AuProperty $p) {
                return $p->getParent() === null;
        });
    }

    public function getSimpleAuProperty($name) {
        foreach ($this->auProperties as $property) {
            if ($property->getPropertyKey() === $name) {
                return $property->getPropertyValue();
            }
        }
        return null;
    }

    /**
     * @return AuProperty|null
     */
    public function getAuProperty($name) {
        foreach ($this->auProperties as $property) {
            if ($property->getPropertyKey() === 'key' && $property->getPropertyValue() === $name) {
                return $property->getParent();
            }
        }
        return null;
    }

    /**
     * @param string $key
     * @return string
     */
    public function getAuPropertyValue($key) {
        $value = '';
        $property = $this->getAuProperty($key);
        if ($property === null) {
            return $value;
        }
        foreach ($property->getChildren() as $child) {
            if ($child->getPropertyKey() === 'value') {
                $value = $child->getPropertyValue();
                break;
            }
        }
        return $value;
    }

    /**
     * Add auStatus.
     *
     * @param AuStatus $auStatus
     *
     * @return Au
     */
    public function addAuStatus(AuStatus $auStatus) {
        $this->auStatus[] = $auStatus;

        return $this;
    }

    /**
     * Remove auStatus.
     *
     * @param AuStatus $auStatus
     */
    public function removeAuStatus(AuStatus $auStatus) {
        $this->auStatus->removeElement($auStatus);
    }

    /**
     * Get auStatus.
     *
     * @return Collection
     */
    public function getAuStatus() {
        return $this->auStatus;
    }

    /**
     * Add deposit.
     *
     * @param Deposit $deposit
     *
     * @return Au
     */
    public function addDeposit(Deposit $deposit) {
        $this->deposits[] = $deposit;

        return $this;
    }

    /**
     * Remove deposit.
     *
     * @param Deposit $deposit
     */
    public function removeDeposit(Deposit $deposit) {
        $this->deposits->removeElement($deposit);
    }

    /**
     * Get deposits.
     *
     * @return Collection
     */
    public function getDeposits() {
        return $this->deposits;
    }

    /**
     * Set auid.
     *
     * @param string $auid
     *
     * @return Au
     */
    public function setAuid($auid) {
        $this->auid = $auid;

        return $this;
    }

    /**
     * Get auid.
     *
     * @return string
     */
    public function getAuid() {
        return $this->auid;
    }

}
