<?php

/*
 *  This file is licensed under the MIT License version 3 or
 *  later. See the LICENSE file for details.
 *
 *  Copyright 2018 Michael Joyce <ubermichael@gmail.com>.
 */

namespace AppBundle\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

/**
 * Data entry form for LOCKSS plugins.
 */
class PluginType extends AbstractType {

    /**
     * Build the form by adding types to $builder.
     *
     * @param FormBuilderInterface $builder
     *   Form builder.
     * @param array $options
     *   Unused form options.
     */
    public function buildForm(FormBuilderInterface $builder, array $options) {
        $builder->add('generateManifests', ChoiceType::class, array(
            'label' => 'Generate Manifests',
            'expanded' => true,
            'multiple' => false,
            'choices' => array(
                'Enabled' => true,
                'Disabled' => false,
            ),
            'required' => true,
            'placeholder' => false,
            'attr' => array(
                'help_block' => 'Should LOCKSSOMatic generate manifest files and set the manifest_url property on AUs?',
            ),
        ));
        
        $plugin = $options['plugin'];
        $names = array();
        foreach ($plugin->getConfigPropertyNames() as $name) {
            $names[$name] = $name;
        }
        $builder->add('generatedParams', ChoiceType::class, array(
            'label' => 'Generated Params',
            'expanded' => true,
            'multiple' => true,
            'choices' => $names,
            'required' => false,
            'attr' => array(
                'help_block' => 'Parameters generated by LOCKSSOMatic will be ignored for matching content to AUs.',
            ),
        ));
    }

    /**
     * Configure default options.
     *
     * @param OptionsResolver $resolver
     *   Options resolver to pass options back to configure the form.
     */
    public function configureOptions(OptionsResolver $resolver) {
        $resolver->setDefaults(array(
            'data_class' => 'AppBundle\Entity\Plugin',
        ));
        $resolver->setRequired(array(
            'plugin',
        ));
    }

}
